/* tests/core/Website/WWW/static/svelte/from1.svelte generated by Svelte v3.44.1 */
"use strict";

const { create_ssr_component, escape, validate_component } = require("svelte/internal");
const { default: BigNumber } = require("./from2.svelte.ssr.cjs");

const css = {
	code: "@import \"./from2.svelte.css\";.counter.svelte-11tu8i0 p.svelte-11tu8i0{font-weight:800;font-family:\"Segoe UI\", Tahoma, Geneva, Verdana, sans-serif;color:#3579b9}.counter.svelte-11tu8i0 button.svelte-11tu8i0{font-size:16px;border:none;background-color:#3a6fac;color:#ffffff}.counter.svelte-11tu8i0.svelte-11tu8i0{border:solid 1px #000}",
	map: "{\"version\":3,\"file\":\"from1.svelte\",\"sources\":[\"from1.svelte\"],\"sourcesContent\":[\"<script>\\nimport BigNumber from './from2.svelte.ssr.cjs';\\nexport let count = 0;\\nlet settings = { max: 100, current: count };\\n$: {\\n  settings.current = count;\\n}\\nlet makeNumber = Number(Math.random().toFixed(3));\\n\\n</script>\\n<main>\\n    <div class=\\\"counter\\\">\\n        <p>Counte: {count}</p>\\n        <button on:click={() =>  settings.max > count ? count++: null}>+</button>\\n    </div>\\n    <BigNumber number={makeNumber}/>\\n    {JSON.stringify(settings, null, 2)}\\n</main>\\n\\n<style>@import \\\"./from2.svelte.css\\\";.counter p {\\n  font-weight: 800;\\n  font-family: \\\"Segoe UI\\\", Tahoma, Geneva, Verdana, sans-serif;\\n  color: #3579b9;\\n}\\n.counter button {\\n  font-size: 16px;\\n  border: none;\\n  background-color: #3a6fac;\\n  color: #ffffff;\\n}\\n\\n.counter {\\n  border: solid 1px #000;\\n}</style>\"],\"names\":[],\"mappings\":\"AAmBO,QAAQ,oBAAoB,CAAC,uBAAQ,CAAC,CAAC,eAAC,CAAC,AAC9C,WAAW,CAAE,GAAG,CAChB,WAAW,CAAE,UAAU,CAAC,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,UAAU,CAC5D,KAAK,CAAE,OAAO,AAChB,CAAC,AACD,uBAAQ,CAAC,MAAM,eAAC,CAAC,AACf,SAAS,CAAE,IAAI,CACf,MAAM,CAAE,IAAI,CACZ,gBAAgB,CAAE,OAAO,CACzB,KAAK,CAAE,OAAO,AAChB,CAAC,AAED,QAAQ,8BAAC,CAAC,AACR,MAAM,CAAE,KAAK,CAAC,GAAG,CAAC,IAAI,AACxB,CAAC\"}"
};

const From1 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	let { count = 0 } = $$props;
	let settings = { max: 100, current: count };
	let makeNumber = Number(Math.random().toFixed(3));
	if ($$props.count === void 0 && $$bindings.count && count !== void 0) $$bindings.count(count);
	$$result.css.add(css);

	$: {
		{
			settings.current = count;
		}
	}

	return `<main><div class="${"counter svelte-11tu8i0"}"><p class="${"svelte-11tu8i0"}">Counte: ${escape(count)}</p>
        <button class="${"svelte-11tu8i0"}">+</button></div>
    ${validate_component(BigNumber, "BigNumber").$$render($$result, { number: makeNumber }, {}, {})}
    ${escape(JSON.stringify(settings, null, 2))}
</main>`;
});

exports.default = From1;