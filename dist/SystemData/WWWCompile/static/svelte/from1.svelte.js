/* from1.svelte generated by Svelte v3.44.1 */
import {
	SvelteComponentDev,
	add_location,
	append_hydration_dev,
	attr_dev,
	children,
	claim_component,
	claim_element,
	claim_space,
	claim_text,
	create_component,
	destroy_component,
	detach_dev,
	dispatch_dev,
	element,
	init,
	insert_hydration_dev,
	listen_dev,
	mount_component,
	safe_not_equal,
	set_data_dev,
	space,
	text,
	transition_in,
	transition_out,
	validate_slots
} from "/serv/svelte/internal";

import BigNumber from './from2.svelte';
const file = "from1.svelte";

function create_fragment(ctx) {
	let main;
	let div;
	let p;
	let t0;
	let t1;
	let t2;
	let button;
	let t3;
	let t4;
	let bignumber;
	let t5;
	let t6_value = JSON.stringify(/*settings*/ ctx[1], null, 2) + "";
	let t6;
	let current;
	let mounted;
	let dispose;

	bignumber = new BigNumber({
			props: { number: /*makeNumber*/ ctx[2] },
			$$inline: true
		});

	const block = {
		c: function create() {
			main = element("main");
			div = element("div");
			p = element("p");
			t0 = text("Counte: ");
			t1 = text(/*count*/ ctx[0]);
			t2 = space();
			button = element("button");
			t3 = text("+");
			t4 = space();
			create_component(bignumber.$$.fragment);
			t5 = space();
			t6 = text(t6_value);
			this.h();
		},
		l: function claim(nodes) {
			main = claim_element(nodes, "MAIN", {});
			var main_nodes = children(main);
			div = claim_element(main_nodes, "DIV", { class: true });
			var div_nodes = children(div);
			p = claim_element(div_nodes, "P", { class: true });
			var p_nodes = children(p);
			t0 = claim_text(p_nodes, "Counte: ");
			t1 = claim_text(p_nodes, /*count*/ ctx[0]);
			p_nodes.forEach(detach_dev);
			t2 = claim_space(div_nodes);
			button = claim_element(div_nodes, "BUTTON", { class: true });
			var button_nodes = children(button);
			t3 = claim_text(button_nodes, "+");
			button_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			t4 = claim_space(main_nodes);
			claim_component(bignumber.$$.fragment, main_nodes);
			t5 = claim_space(main_nodes);
			t6 = claim_text(main_nodes, t6_value);
			main_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(p, "class", "svelte-11tu8i0");
			add_location(p, file, 12, 8, 254);
			attr_dev(button, "class", "svelte-11tu8i0");
			add_location(button, file, 13, 8, 285);
			attr_dev(div, "class", "counter svelte-11tu8i0");
			add_location(div, file, 11, 4, 224);
			add_location(main, file, 10, 0, 213);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, main, anchor);
			append_hydration_dev(main, div);
			append_hydration_dev(div, p);
			append_hydration_dev(p, t0);
			append_hydration_dev(p, t1);
			append_hydration_dev(div, t2);
			append_hydration_dev(div, button);
			append_hydration_dev(button, t3);
			append_hydration_dev(main, t4);
			mount_component(bignumber, main, null);
			append_hydration_dev(main, t5);
			append_hydration_dev(main, t6);
			current = true;

			if (!mounted) {
				dispose = listen_dev(button, "click", /*click_handler*/ ctx[3], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (!current || dirty & /*count*/ 1) set_data_dev(t1, /*count*/ ctx[0]);
			if ((!current || dirty & /*settings*/ 2) && t6_value !== (t6_value = JSON.stringify(/*settings*/ ctx[1], null, 2) + "")) set_data_dev(t6, t6_value);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(bignumber.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(bignumber.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(main);
			destroy_component(bignumber);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('From1', slots, []);
	let { count = 0 } = $$props;
	let settings = { max: 100, current: count };
	let makeNumber = Number(Math.random().toFixed(3));
	const writable_props = ['count'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<From1> was created with unknown prop '${key}'`);
	});

	const click_handler = () => settings.max > count
	? $$invalidate(0, count++, count)
	: null;

	$$self.$$set = $$props => {
		if ('count' in $$props) $$invalidate(0, count = $$props.count);
	};

	$$self.$capture_state = () => ({ BigNumber, count, settings, makeNumber });

	$$self.$inject_state = $$props => {
		if ('count' in $$props) $$invalidate(0, count = $$props.count);
		if ('settings' in $$props) $$invalidate(1, settings = $$props.settings);
		if ('makeNumber' in $$props) $$invalidate(2, makeNumber = $$props.makeNumber);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*count*/ 1) {
			$: {
				$$invalidate(1, settings.current = count, settings);
			}
		}
	};

	return [count, settings, makeNumber, click_handler];
}

class From1 extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { count: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "From1",
			options,
			id: create_fragment.name
		});
	}

	get count() {
		throw new Error("<From1>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set count(value) {
		throw new Error("<From1>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default From1;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7T0FDQSxTQUFBLE1BQUEsZ0JBQUE7Ozs7Ozs7Ozs7Ozs7OztnQkFpQkEsSUFBQSxDQUFBLFNBQUEsY0FBQSxHQUFBLEtBQUEsSUFBQSxFQUFBLENBQUE7Ozs7Ozs7bUNBREEsR0FBQTs7Ozs7Ozs7O2FBSEEsVUFBQTt1QkFBQSxHQUFBOzs7YUFDQSxHQUFBOzs7Ozs7Ozs7Ozs7Ozs0QkFEQSxVQUFBO3NDQUFBLEdBQUE7Ozs7O2lDQUNBLEdBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBSEEsb0JBT0E7R0FOQSxvQkFHQTtHQUZBLG9CQUFBOzs7O0dBQ0Esb0JBQUE7Ozs7Ozs7Ozs7Ozs7O21FQURBLEdBQUE7d0VBSUEsSUFBQSxDQUFBLFNBQUEsY0FBQSxHQUFBLEtBQUEsSUFBQSxFQUFBLENBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztPQWRBLEtBQUEsR0FBQSxDQUFBO0tBQ0EsUUFBQSxLQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsT0FBQSxFQUFBLEtBQUE7S0FLQSxVQUFBLEdBQUEsTUFBQSxDQUFBLElBQUEsQ0FBQSxNQUFBLEdBQUEsT0FBQSxDQUFBLENBQUE7Ozs7Ozs7NkJBS0EsUUFBQSxDQUFBLEdBQUEsR0FBQSxLQUFBO21CQUFBLEtBQUE7R0FBQSxJQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQVJBLENBQUE7b0JBQ0EsUUFBQSxDQUFBLE9BQUEsR0FBQSxLQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7IiwibmFtZXMiOltdLCJzb3VyY2VzIjpbInN0YXRpYy9zdmVsdGUvZnJvbTEuc3ZlbHRlP3NvdXJjZT10cnVlIl19