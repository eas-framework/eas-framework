/* from2.svelte generated by Svelte v3.44.1 */
import {
	SvelteComponentDev,
	add_location,
	append_hydration_dev,
	attr_dev,
	children,
	claim_element,
	claim_text,
	detach_dev,
	dispatch_dev,
	element,
	init,
	insert_hydration_dev,
	listen_dev,
	noop,
	safe_not_equal,
	set_data_dev,
	set_style,
	text,
	validate_slots
} from "/serv/svelte/internal";

const file = "from2.svelte";

function create_fragment(ctx) {
	let div;
	let p;
	let t0;
	let t1;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			div = element("div");
			p = element("p");
			t0 = text("This number: ");
			t1 = text(/*number*/ ctx[0]);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			p = claim_element(div_nodes, "P", { style: true });
			var p_nodes = children(p);
			t0 = claim_text(p_nodes, "This number: ");
			t1 = claim_text(p_nodes, /*number*/ ctx[0]);
			p_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_style(p, "font-size", /*fountSize*/ ctx[1] + "px");
			add_location(p, file, 6, 4, 102);
			attr_dev(div, "class", "number-color svelte-1lqy072");
			add_location(div, file, 5, 0, 71);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, div, anchor);
			append_hydration_dev(div, p);
			append_hydration_dev(p, t0);
			append_hydration_dev(p, t1);

			if (!mounted) {
				dispose = listen_dev(p, "click", /*click_handler*/ ctx[2], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*number*/ 1) set_data_dev(t1, /*number*/ ctx[0]);

			if (dirty & /*fountSize*/ 2) {
				set_style(p, "font-size", /*fountSize*/ ctx[1] + "px");
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('From2', slots, []);
	let { number = 0 } = $$props;
	let fountSize = 16;
	const writable_props = ['number'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<From2> was created with unknown prop '${key}'`);
	});

	const click_handler = () => $$invalidate(1, fountSize += 2);

	$$self.$$set = $$props => {
		if ('number' in $$props) $$invalidate(0, number = $$props.number);
	};

	$$self.$capture_state = () => ({ number, fountSize });

	$$self.$inject_state = $$props => {
		if ('number' in $$props) $$invalidate(0, number = $$props.number);
		if ('fountSize' in $$props) $$invalidate(1, fountSize = $$props.fountSize);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [number, fountSize, click_handler];
}

class From2 extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { number: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "From2",
			options,
			id: create_fragment.name
		});
	}

	get number() {
		throw new Error("<From2>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set number(value) {
		throw new Error("<From2>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default From2;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzthQU1BLGVBQUE7d0JBQUEsR0FBQTs7Ozs7Ozs7NEJBQUEsZUFBQTt1Q0FBQSxHQUFBOzs7Ozs7MkNBQUEsR0FBQTs7Ozs7O0dBREEsb0JBRUE7R0FEQSxvQkFBQTs7Ozs7Ozs7Ozt5REFBQSxHQUFBOzs7NENBQUEsR0FBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7T0FMQSxNQUFBLEdBQUEsQ0FBQTtLQUNBLFNBQUEsR0FBQSxFQUFBOzs7Ozs7OzZDQUlBLFNBQUEsSUFBQSxDQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7IiwibmFtZXMiOltdLCJzb3VyY2VzIjpbInN0YXRpYy9zdmVsdGUvZnJvbTIuc3ZlbHRlP3NvdXJjZT10cnVlIl19